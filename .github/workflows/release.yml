name: Release
on:
    release:
        types: [published]
jobs:
    build-test-and-publish:
        name: Build and publish library to NuGet
        runs-on: ubuntu-22.04
        env:
            DOTNET_NOLOGO: true
            DOTNET_CLI_TELEMETRY_OPTOUT: true
        steps:
            - name: Checkout
              uses: actions/checkout@v3
              with:
                  ref: ${{ github.sha }}
            - name: Setup .NET Core SDK 6.0.403
              uses: actions/setup-dotnet@v3
              with:
                  dotnet-version: 6.0.403
            - name: Setup .NET Core SDK 7.0.100
              uses: actions/setup-dotnet@v3
              with:
                  dotnet-version: 7.0.100
            - name: Run .NET 6 tests without Hardware Intrinsics
              env:
                  COMPlus_EnableHWIntrinsic: "0"
                  CollectCoverage": "true"
                  CoverletOutputFormat: "json"
                  CoverletOutput: "../../coverage/cover_net6nohw"
              shell: bash
              run: |
                  dotnet test -c Release ./src/Dodo.Primitives.Tests/Dodo.Primitives.Tests.csproj -f net6.0
            - name: Run .NET 6 tests with Hardware Intrinsics
              env:
                  COMPlus_EnableHWIntrinsic: "1"
                  CollectCoverage": "true"
                  CoverletOutputFormat: "json"
                  CoverletOutput: "../../coverage/cover_net6hw"
                  MergeWith: "../../coverage/cover_net6nohw.net6.0.json"
              shell: bash
              run: |
                  dotnet test -c Release ./src/Dodo.Primitives.Tests/Dodo.Primitives.Tests.csproj -f net6.0
            - name: Run .NET 7 tests without Hardware Intrinsics
              env:
                  COMPlus_EnableHWIntrinsic: "0"
                  CollectCoverage": "true"
                  CoverletOutputFormat: "json"
                  CoverletOutput: "../../coverage/cover_net7nohw"
                  MergeWith: "../../coverage/cover_net6hw.net6.0.json"
              shell: bash
              run: |
                  dotnet test -c Release ./src/Dodo.Primitives.Tests/Dodo.Primitives.Tests.csproj -f net7.0
            - name: Run .NET 7 tests with Hardware Intrinsics
              env:
                  COMPlus_EnableHWIntrinsic: "1"
                  CollectCoverage": "true"
                  CoverletOutputFormat: "lcov"
                  CoverletOutput: "../../coverage/cover_full"
                  MergeWith: "../../coverage/cover_net7nohw.net7.0.json"
              shell: bash
              run: |
                  dotnet test -c Release ./src/Dodo.Primitives.Tests/Dodo.Primitives.Tests.csproj -f net7.0
            - name: Publish coverage report to coveralls.io
              uses: coverallsapp/github-action@1.1.3
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  path-to-lcov: ./coverage/cover_full.net7.0.info
            - name: Build and publish library to NuGet
              shell: bash
              run: |
                  dotnet publish ./src/Dodo.Primitives/Dodo.Primitives.csproj -c Release -f net6.0
                  dotnet publish ./src/Dodo.Primitives/Dodo.Primitives.csproj -c Release -f net7.0
                  dotnet pack -c Release --no-restore --no-build --output out ./src/Dodo.Primitives/Dodo.Primitives.csproj
                  rm ./out/*.symbols.nupkg
                  PATH_TO_PACKAGE=$(readlink -f ./out/*.nupkg)
                  dotnet nuget push "$PATH_TO_PACKAGE" --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }}
            - uses: actions/upload-artifact@v3
              with:
                  name: NuGet package
                  path: out/
    upload-release-assets:
        name: Upload release assets
        runs-on: ubuntu-22.04
        needs: build-test-and-publish
        steps:
            - uses: actions/download-artifact@v3
              with:
                  name: NuGet package
                  path: out
            - name: Get package
              id: get-package
              shell: bash
              run: |
                  echo "::set-output name=package::$(ls out/)"
            - name: Upload release assets
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ github.event.release.upload_url }}
                  asset_path: ./out/${{ steps.get-package.outputs.package }}
                  asset_name: ${{ steps.get-package.outputs.package }}
                  asset_content_type: application/zip
