name: Push to master
on:
  push:
    branches:
      - "master"
jobs:
  validate-version:
    name: Validate package version
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.sha }}
      - name: Validate version
        id: validate-version
        run: |
          version_prefix=$(cat ./src/Directory.Build.props | grep "<VersionPrefix>" | sed -e "s/ *<\/*VersionPrefix>//g")
          version_suffix=$(cat ./src/Directory.Build.props | grep "<VersionSuffix>" | sed -e "s/ *<\/*VersionSuffix>//g")
          echo "Package version prefix: $version_prefix"
          echo "Package version suffix: $version_suffix"
          if [ -z "${version_prefix// }" ]; then exit 1; fi
          if [ -z "${version_suffix// }" ] && [ $prerelease == "true" ]
          then
              exit 1
          fi
          version_with_suffix="${version_prefix}"
          if [ ! -z "${version_suffix// }" ]
          then
              version_with_suffix="${version_prefix}-${version_suffix}"
          fi
          echo "::set-output name=version_with_suffix::$version_with_suffix"
          echo "::set-output name=version_suffix::$version_suffix"
  run-tests:
    name: Run tests
    needs: validate-version
    runs-on: windows-2019
    if: ${{ !contains(github.event.commits[0].message, '[skip ci]') }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.sha }}
      - name: Setup .NET Core SDK 6.0.100-preview.1.21103.13
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.100-preview.1.21103.13
      - name: Run tests
        run: |
          dotnet test -c Release ./src/Dodo.Primitives.Tests/Dodo.Primitives.Tests.csproj /p:CollectCoverage=true -f net462 /p:CoverletOutput=../../coverage/cover_netstandard20 /p:CoverletOutputFormat=json
          dotnet test -c Release ./src/Dodo.Primitives.Tests/Dodo.Primitives.Tests.csproj /p:CollectCoverage=true -f netcoreapp3.1 /p:CoverletOutput=../../coverage/cover_netcoreapp31 /p:MergeWith=../../coverage/cover_netstandard20.net462.json /p:CoverletOutputFormat=json
          dotnet test -c Release ./src/Dodo.Primitives.Tests/Dodo.Primitives.Tests.csproj /p:CollectCoverage=true -f net5.0 /p:CoverletOutput=../../coverage/cover_net50 /p:MergeWith=../../coverage/cover_netcoreapp31.netcoreapp3.1.json /p:CoverletOutputFormat=json
          dotnet test -c Release ./src/Dodo.Primitives.Tests/Dodo.Primitives.Tests.csproj /p:CollectCoverage=true -f net6.0 /p:MergeWith=../../coverage/cover_net50.net5.0.json /p:CoverletOutput=../../coverage/cover_full /p:CoverletOutputFormat=lcov
      - name: Publish coverage report to coveralls.io
        uses: coverallsapp/github-action@v1.1.2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ./coverage/cover_full.net6.0.info
  release:
    name: Create release
    runs-on: ubuntu-18.04
    needs: run-tests
    if: ${{ !contains(github.event.commits[0].message, '[skip ci]') }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.sha }}
      - name: Extract version
        id: extract-version
        run: |
          version_prefix=$(cat ./src/Directory.Build.props | grep "<VersionPrefix>" | sed -e "s/ *<\/*VersionPrefix>//g")
          version_suffix=$(cat ./src/Directory.Build.props | grep "<VersionSuffix>" | sed -e "s/ *<\/*VersionSuffix>//g")
          echo "Package version prefix: $version_prefix"
          echo "Package version suffix: $version_suffix"
          if [ -z "${version_prefix// }" ]; then exit 1; fi
          version_with_suffix="${version_prefix}"
          has_suffix="false"
          if [ ! -z "${version_suffix// }" ]
          then
              version_with_suffix="${version_prefix}-${version_suffix}"
              has_suffix="true"
          fi
          echo "::set-output name=version_with_suffix::$version_with_suffix"
          echo "::set-output name=has_suffix::$has_suffix"
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.extract-version.outputs.version_with_suffix }}
          release_name: Release ${{ steps.extract-version.outputs.version_with_suffix }}
          draft: true
          prerelease: ${{ steps.extract-version.outputs.has_suffix }}
